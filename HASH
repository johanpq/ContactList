#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TABLE_SIZE 5000

typedef struct {
    char nome[100];
    char telefone[20];
} Contato;

typedef struct Node {
    Contato contato;
    struct Node* next;
} Node;

Node* hashTable[TABLE_SIZE];

unsigned int hashFunction(char* key) {
    unsigned int hash = 0;
    int i;
    for (i = 0; i < strlen(key); i++) {
        hash += key[i];
    }
    return hash % TABLE_SIZE;
}

void insert(char* nome, char* telefone) {
    Contato* novoContato = (Contato*)malloc(sizeof(Contato));
    strcpy(novoContato->nome, nome);
    strcpy(novoContato->telefone, telefone);

    unsigned int index = hashFunction(nome);
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->contato = *novoContato;
    newNode->next = NULL;

    if (hashTable[index] == NULL) {
        hashTable[index] = newNode;
    } else {
        Node* temp = hashTable[index];
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

void readFromFileAndInsert(char* filename, int numContatos) {
    FILE* file = fopen(filename, "r");
    if (file == NULL) {
        printf("Erro ao abrir o arquivo %s\n", filename);
        exit(1);
    }

    char line[256];
    char nome[100];
    char telefone[20];
    int contatosInseridos = 0;

    while (fgets(line, sizeof(line), file) != NULL && contatosInseridos < numContatos) {
        if (strstr(line, "Nome:") != NULL) {
            sscanf(line, "Nome: %[^\n]", nome);
        } else if (strstr(line, "Telefone:") != NULL) {
            sscanf(line, "Telefone: %[^\n]", telefone);
            insert(nome, telefone);
            contatosInseridos++;
        }
    }

    fclose(file);
}

char* search(char* nome) {
    unsigned int index = hashFunction(nome);
    Node* temp = hashTable[index];
    while (temp != NULL) {
        if (strcmp(temp->contato.nome, nome) == 0) {
            return temp->contato.telefone;
        }
        temp = temp->next;
    }
    return "Contato nÃ£o encontrado";
}

void removeContact(char* nome) {
    unsigned int index = hashFunction(nome);
    Node* temp = hashTable[index];
    Node* prev = NULL;
    while (temp != NULL) {
        if (strcmp(temp->contato.nome, nome) == 0) {
            if (prev == NULL) {
                hashTable[index] = temp->next;
            } else {
                prev->next = temp->next;
            }
            free(temp);
            return;
        }
        prev = temp;
        temp = temp->next;
    }
}

int main() {
    // Inicializando a tabela hash
    for (int i = 0; i < TABLE_SIZE; i++) {
        hashTable[i] = NULL;
    }

    // Lendo e inserindo os 5000 primeiros contatos do arquivo na tabela hash
    readFromFileAndInsert("C:\\Users\\Cliente\\Desktop\\AV2\\todosOsContatos.txt", 5000);

    // Testando a busca de contatos
    printf("Telefone de Rebeca da Mata: %s\n", search("Rebeca da Mata"));
    printf("Telefone de Gustavo Carvalho: %s\n", search("Gustavo Carvalho"));

    // Inserindo um novo contato e testando a busca novamente
    insert("Ana", "555444333");
    printf("Telefone de Ana (inserido): %s\n", search("Ana"));

    // Removendo um contato e testando a busca novamente
    removeContact("Rebeca da Mata");
    printf("Telefone de Rebeca da Mata (removido): %s\n", search("Rebeca da Mata"));

    return 0;
}
